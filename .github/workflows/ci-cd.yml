name: CI/CD Pipeline

# Триггеры для запуска workflow
on:
  # Запуск при push в ветки и при создании тегов
  push:
    branches: [ "*" ]
    tags: [ "v*.*.*" ]
  # Запуск при создании pull request
  pull_request:
    branches: [ main, develop ]

# Глобальные переменные окружения
env:
  GO_VERSION: '1.22'
  REGISTRY: docker.io
  IMAGE_NAME: ykmn0/go1fl-sprint11

jobs:
  # Job 1: Проверка кода и тестирование
  test:
    name: 🧪 Test and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: 📦 Download dependencies
      run: go mod download
    
    - name: 🔍 Verify dependencies
      run: go mod verify
    
    - name: 🧹 Run go vet
      run: go vet ./...
    
    - name: 🎯 Run gofmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: 🏗️ Build application
      run: go build -v ./...
    
    - name: 🧪 Run tests
      run: |
        go test -v ./... -coverprofile=coverage.out
        go tool cover -html=coverage.out -o coverage.html
    
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
    
    - name: 🔒 Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'gosec-report.sarif'
      continue-on-error: true
    
    # Статический анализ с golangci-lint
    - name: 🔍 Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  # Job 2: Сборка и публикация Docker образа (только при тегах)
  docker-publish:
    name: 🐳 Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 📝 Generate release notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## 🚀 Release Notes" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 📦 Docker Image" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
        echo "\`\`\`" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🔄 Changes" >> $GITHUB_OUTPUT
        git log --oneline --pretty=format:'- %s (%h)' $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT || echo "- Initial release" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: 🎉 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false