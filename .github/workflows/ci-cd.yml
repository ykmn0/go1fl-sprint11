name: CI/CD Pipeline

# –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow
on:
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ push –≤ –≤–µ—Ç–∫–∏ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–æ–≤
  push:
    branches: [ "*" ]
    tags: [ "v*.*.*" ]
  # –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ pull request
  pull_request:
    branches: [ main, develop ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env:
  GO_VERSION: '1.22'
  REGISTRY: docker.io
  IMAGE_NAME: ykmn0/go1fl-sprint11

jobs:
  # Job 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  test:
    name: üß™ Test and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üêπ Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: üì¶ Download dependencies
      run: go mod download
    
    - name: üîç Verify dependencies
      run: go mod verify
    
    - name: üßπ Run go vet
      run: go vet ./...
    
    - name: üéØ Run gofmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: üèóÔ∏è Build application
      run: go build -v ./...
    
    - name: üß™ Run tests
      run: |
        mkdir -p .artifacts
        go test -v ./... -race -coverprofile=coverage.out -covermode=atomic | tee .artifacts/test.log
        go tool cover -html=coverage.out -o coverage.html
    
    - name: üìä Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage-reports
        path: |
          coverage.out
          coverage.html
          .artifacts/test.log
        if-no-files-found: warn
        retention-days: 7
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å golangci-lint
    - name: üîç Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.61.0
        args: --timeout=5m

  # Job 2: –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–µ–≥–∞—Ö)
  docker-publish:
    name: üê≥ Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üîß Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: üîë Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: üè∑Ô∏è Extract version from tag
      id: version
      run: |
        tag="${GITHUB_REF#refs/tags/}"
        echo "tag=$tag" >> $GITHUB_OUTPUT
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
        if [[ $tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
          major="v${BASH_REMATCH[1]}"
          minor="v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"
          patch="v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
          echo "major=$major" >> $GITHUB_OUTPUT
          echo "minor=$minor" >> $GITHUB_OUTPUT
          echo "patch=$patch" >> $GITHUB_OUTPUT
        fi
    
    - name: üèóÔ∏è Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.patch }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.minor }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.major }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        labels: |
          org.opencontainers.image.title=Go1FL Sprint 11
          org.opencontainers.image.description=Go application from Sprint 11
          org.opencontainers.image.version=${{ steps.version.outputs.tag }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
    
    - name: üìù Generate release notes
      id: release_notes
      run: |
        {
          echo "RELEASE_NOTES<<EOF"
          echo "## üöÄ Release ${{ steps.version.outputs.tag }}"
          echo ""
          echo "### üì¶ Docker Image"
          echo "\`\`\`bash"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }}"
          echo "\`\`\`"
          echo ""
          echo "### üè∑Ô∏è Available Tags"
          echo "- \`${{ steps.version.outputs.tag }}\` (exact version)"
          echo "- \`${{ steps.version.outputs.minor }}\` (minor version)"
          echo "- \`${{ steps.version.outputs.major }}\` (major version)"
          echo "- \`latest\` (latest release)"
          echo ""
          echo "### üîÑ Changes"
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            git log --oneline --pretty=format:'- %s (%h)' $(git describe --tags --abbrev=0 HEAD^)..HEAD
          else
            echo "- Initial release"
          fi
          echo ""
          echo "### üê≥ Multi-architecture Support"
          echo "- linux/amd64"
          echo "- linux/arm64"
          echo "EOF"
        } >> $GITHUB_OUTPUT
    
    - name: üéâ Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}